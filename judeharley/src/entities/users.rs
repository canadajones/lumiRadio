//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.15

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i64,
    pub watched_time: Decimal,
    pub boonbucks: i32,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub last_message_sent: Option<DateTime>,
    pub migrated: bool,
    pub amber: i32,
    pub amethyst: i32,
    pub artifact: i32,
    pub caulk: i32,
    pub chalk: i32,
    pub cobalt: i32,
    pub diamond: i32,
    pub garnet: i32,
    pub gold: i32,
    pub iodine: i32,
    pub marble: i32,
    pub mercury: i32,
    pub quartz: i32,
    pub ruby: i32,
    pub rust: i32,
    pub shale: i32,
    pub sulfur: i32,
    pub tar: i32,
    pub uranium: i32,
    pub zillium: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::cans::Entity")]
    Cans,
    #[sea_orm(has_many = "super::connected_youtube_accounts::Entity")]
    ConnectedYoutubeAccounts,
    #[sea_orm(has_many = "super::favourite_songs::Entity")]
    FavouriteSongs,
    #[sea_orm(has_many = "super::song_requests::Entity")]
    SongRequests,
}

impl Related<super::cans::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Cans.def()
    }
}

impl Related<super::connected_youtube_accounts::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ConnectedYoutubeAccounts.def()
    }
}

impl Related<super::favourite_songs::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FavouriteSongs.def()
    }
}

impl Related<super::song_requests::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SongRequests.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
